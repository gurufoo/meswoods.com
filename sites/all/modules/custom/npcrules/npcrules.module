<?php



/**
* Load the various rules files
*/
module_load_include('inc', 'npcrules', 'inc/facial_hair.rules');
module_load_include('inc', 'rpgnaming', 'inc/npc_name.rules');
module_load_include('module', 'rpgmain', 'rpgmain');
module_load_include('inc', 'npcrules', 'inc/measurements.rules');




/**
* This specifically affets the NPC content type creation form
*/
function npcrules_form_npc_node_form_alter (&$form, &$form_state, $form_id) {

//dpm($form_id, '$form_id');
  //dpm($form_state, '$form_state');
  //dpm($form, '$form');

  if (isset($form_state['build_info']['args'][0]->nid)) {
    //dpm('nid exists, we are on an existing npc');
  } else {  //no nid, this is a new npc do awesome stuff here
    // Make the title unrequired, because we'll generate a random one if it's empty
    $form['title']['#required'] = FALSE;
    $form['title']['#default_value'] = 'Choose a random name for me';


    $form['#validate'][] = 'facial_hair_female_no_hair'; // Females don't have facial  hair
    $form['#validate'][] = 'facial_hair_male_dwarf_likely'; // Male Dwarves are likely to have facial hair
    //$form['#validate'][] = 'profession_adventurer_unlikely'; // NPCs aren't likely to have adventuring professions
    $form['#validate'][] = 'validate_npc_measurements'; // Generate an NPCs numerical measurements (e.g. height, age, weight)
    //$form['#validate'][] = 'generate_npc_weight'; // Generate an NPCs weight
    $form['#validate'][] = 'validate_npc_names'; // Generate a name
  }
}



/**
 * Retrieves a list of elements (fields). Often this is used to operate on all
 * the fields that will have random values.
 *
 * @return array An array of elements (fields).
 */
function _get_random_npc_fields () {
  return array(
        'field_facial_hair_style',
        'field_hair_color',
        'field_hair_style',
        'field_hair_length',
        'field_eye_color',
        'field_eye_style',
        'field_gender',
        'field_npc_race',
        'field_skin_color',
        'field_npc_mannerisms',
        'field_distinguishing_features',
        'field_motivation',
				'field_instinct',
        'field_npc_approach',
				'field_profession',
        'field_alignment',
        );
}



/**
* Generate a short description using the computed_field module.
*/
function computed_field_field_short_description_auto_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {

  //dpm($field, '$field');
  //dpm($entity, '$entity');
  // Get the values for the reandomly selected fields.  This is so we don't have to type them out field by field.
  $fields = _get_random_npc_fields();
  $values = array();
  foreach ($fields as $field) {

    $var = field_get_items('node', $entity, $field);
    //dpm($field, '$field');
    //dpm($var, '$var');
    $value_display = field_view_value('node', $entity, $field, $var[0]);
    $value_display = strtolower($value_display['#markup']);
    $value_machine = $var[0]['value'];

    //dpm($value_display, '$value');
    // Make sure to store both the display value and the machine name
    // Some fields below rely on functions that in turn rely on machine names.
    $values[$field]['display'] = $value_display;
    $values[$field]['machine'] = $value_machine;

  }
  //dpm($values, '$values');

  $name = $entity->title;
  $gender = $values['field_gender']['display'];
  //dpm($gender, '$gender');
  // Race
  $race = $values['field_npc_race']['display'];
  $race_machine = $values['field_npc_race']['machine'];
  // Distinquishing features
  $df = $values['field_distinguishing_features']['display'];
  // Mannerisms
  $mann = _placeholder_display($values['field_npc_mannerisms']['display'], $entity);
  // Hair style 
  $hs = _placeholder_display($values['field_hair_style']['display'], $entity);
  // Hair color
  $hc = $values['field_hair_color']['display'];
  // Hair Length
  $hl = $values['field_hair_length']['display'];
  // Eye color
  $ec = $values['field_eye_color']['display'];
  // Eye style
  $es = $values['field_eye_style']['display'];
  // Skin color
  $sc = $values['field_skin_color']['display'];
  // Height Descriptor
  $height_desc = _get_racial_measurement_descriptor($race_machine, 'field_height', $entity->field_height['und'][0]['value']);
  //dpm($height_desc, '$height_desc');
  $weight_desc = _get_racial_measurement_descriptor($race_machine, 'field_weight', $entity->field_weight['und'][0]['value']);
  // Age
  $age_desc = _get_racial_measurement_descriptor($race_machine, 'field_npc_age', $entity->field_npc_age['und'][0]['value']);



  /********* Physical desciption **********/
  // Store the descriptive sentences in an array for random ordering and imploding.
  $desc = array();
  /***** Gender / Race / Age (gra) *****/

  $gra_display_type = rand(1,3);

  switch ($gra_display_type) {
    case 1:
      $format = "%s is %s %s, and looks to be %s.";
      $desc[] = sprintf($format, ucfirst(_gender_format($gender, 'shehe')),_avsan($race) , $race, $age_desc);
      break;
    case 2:
      $format = "The %s person, by all appearances, is a %s %s.";
      $desc[] = sprintf($format, $age_desc, $gender, $race);
      break;
    case 3:
      $format = "The %s is %s, %s %s by the looks of it.";
      $desc[] = sprintf($format, $gender, $age_desc, _avsan($race) ,$race);
      break;
  }

  /***** Skin / Weight / Height (swh) *****/

  $swh_display_type = rand(1,3);
  switch ($swh_display_type) {
    case 1:
      $format = "%s skin covers %s %s frame and %s stature.";
      $desc[] = sprintf($format, ucfirst($sc), _gender_format($gender, 'herhis'), $weight_desc, $height_desc);
      break;
    case 2:
      $format = "%s %s stature and %s build are wrapped in %s skin.";
      $desc[] = sprintf($format, ucfirst(_gender_format($gender, 'herhis')), $height_desc, $weight_desc, $sc);
      break;
    case 3:
      $format = "%s %s form is paired with %s skin and %s physique.";
      $desc[] = sprintf($format, ucfirst(_gender_format($gender, 'herhis')), $height_desc, $sc, $weight_desc);
      break;
  }

  /***** Eyes and Hair (eh) *****/

  $eh_display_type = rand(1,2);
  switch ($eh_display_type) {
  case 1:
    $format = "%s %s, %s eyes are complimented by %s %s, %s %s hair.";
    $desc[] = sprintf($format, ucfirst(_gender_format($gender, 'herhis')), $ec, $es, _gender_format($gender, 'herhis'), $hl, $hs, $hc);
  break;
  case 2:
    $format = "%s head is adorned with %s, %s %s hair and %s, %s eyes.";
    $desc[] = sprintf($format, ucfirst(_gender_format($gender, 'herhis')), $hl, $hs, $hc, $es, $ec);
  break;
  }

  shuffle($desc);
  $entity_field[0]['value'] = implode(' ',$desc);
}


/**
* Perform searches and replaces on mannerisms to add in pronouns
*/
function _placeholder_display ($content, $node) {
  //dpm($content, '$mannerisms');
  //dpm($node, '$node');
  
  //Set up the gender pronoun
  $gender = $node->field_gender['und'][0]['value'];
  
  $patterns = array();
  
  $replacements = array();
  
  # 1 define the regex pattern
  $name_pattern = '~:name:~';
  $herhis_pattern = '~:herhis:~';
  $shehe_pattern = '~:shehe:~';
  
  # 2 assign the pattern to the patterns array
  $patterns[] = $name_pattern;
  $patterns[] = $herhis_pattern;
  $patterns[] = $shehe_pattern;
  
  # 3 define the replacemnt
  $name_replacement = $node->title;
  $herhis_replacement = _gender_format($gender, 'herhis');
  $shehe_replacement = _gender_format($gender, 'shehe');
  
  # 4 assing the replacement to the replacements array
  $replacements[] = $name_replacement;
  $replacements[] = $herhis_replacement;
  $replacements[] = $shehe_replacement;

  $content = preg_replace($patterns, $replacements, $content);
  return $content;
}



function _gender_format($gender, $declension) {
  switch ($gender) {
    case 'female':
      switch ($declension) {
        case 'herhis':
          return 'her';
          break;
        case 'shehe':
          return 'she';
          break;
      }
    case 'male':
      switch ($declension) {
        case 'herhis':
          return 'his';
          break;
        case 'shehe':
          return 'he';
          break;
      }
  }

}
