<?php

function rpgmain_menu () {
  $items = array();

  $items['admin/rpg/create/%'] = array(
      'title' => 'Create nodes',
      'page callback' => 'rpgmain_rpg_createnode',
      'page arguments' => array(3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      );
  // Show a node in a ctools modal window.
  $items['rpgmodal/%node'] = array(
      'page callback' => '_node_display',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'modal' => TRUE,
      );


  return $items;

}


/**
* Helper function that will display node content.
* Initially used in modal displays
* @see rpg_menu()
*/
function _node_display ($node) {
  $node2 = node_view($node);
  $output = drupal_render($node2); 
  return $output;
}


/**
* This is a Parent-type function.  It should call all the child-type functions
* needed to generate the type of node that $nodetype determines.  After assembling
* the node, it should save the node.
* @param $nodetype string The machine name of the node type to create.
* @param $presets array An array that stores any predetermined values, keyed by
*   the machine name of the field.  An example use case is when this a tavern  gets
*   created, it would be nice to be able to create an NPC with the 'bartender' profession.
*/
function rpgmain_rpg_createnode ($nodetype, $presets = NULL) {
  //dpm($nodetype, '$nodetype');
  //dpm($presets, '$presets');
  // Create a baseline node
  $newnode = new stdClass();
  $newnode->type = $nodetype;
  $newnode->language = LANGUAGE_NONE;
  //dpm($newnode, '$newnode');
  // Construct a fucntion name to call for specific node types
  $fn = '_rpgmain_populate_node_' . $nodetype;
  if (function_exists($fn)) {
    // Get node type specific data
    $node_specifics = $fn($presets);
  } else {
    $format = "A <strong>%s</strong> node specific function does not exist.  Create <strong>%s</strong> and have it return an object with properties specific to the <strong>%s</strong> node type.";
    return sprintf($format, $nodetype, $fn, $nodetype, TRUE);
  }
  //dpm($node_specifics, '$node_specifics');
  // Merge the baseline node with the node type specifid data
  $newnode = (object) array_merge( (array) $newnode, (array) $node_specifics);
  //dpm($newnode, '$newnode');

  // Assign all the presets
  foreach ($presets as $field => $potentials) {
    //dpm($field, '$field');
    //dpm($potentials, '$potentials');
    $values = array();
    foreach ($potentials as $potential) {
      //dpm($potential, '$potential');
      $values[$potential] = $potential;
    }
    $rnd = array_rand($values);
    $newnode->{$field}['und'][0]['value'] = $values[$rnd];
  }

  //dpm($newnode, '$newnode before prepare');
  node_object_prepare($newnode);
  //dpm($newnode, '$newnode after prepare');
  $node = node_submit($newnode);
  //dpm($node, '$node just before saving');
  node_save($node);
  //dpm($node, '$node after save');
  //return 'Page content or redirect location TBD... TODO';
  return $node;
}


function _rpgmain_populate_node_npc ($presets = NULL) {
  // TODO Make this function do what its documentation says it should do 8^)
  module_load_include('inc', 'rpgnaming', 'inc/npc_name.rules');
  module_load_include('inc', 'npcrules', 'inc/measurements.rules');
  // $props stores all the properties specific to the node type
  $props = new stdClass();
  $randomized_fields = _getfields ('npc');

  foreach ($randomized_fields as $field) {
    $opts = _getopts ($field);
    $rnd = array_rand($opts);
    $props->{$field} = array('und' => array(0 => array( 'value' => $rnd)));
  }
  $race = $props->field_npc_race['und'][0]['value'];
  $df = $props->field_distinguishing_features['und'][0]['value'];
  $gender = $props->field_gender['und'][0]['value'];
  $measurement_fields = generate_npc_measurements ($race, $df);

  foreach ($measurement_fields as $field => $value) {
    $props->{$field}['und'][0]['value'] = $value;
  }

  $female_facial_hair = female_no_facial_hair($gender);
  if ($female_facial_hair) {
    $props->field_facial_hair_style['und'][0]['value'] = $female_facial_hair;
  }


  $props->field_facial_hair_style['und'][0]['value'] = male_dwarf_facial_hair_likely($gender, $race, $props->field_facial_hair_style['und'][0]['value']);

  $name = _generate_random_name($props->field_npc_race['und'][0]['value'], $props->field_gender['und'][0]['value']);
  $props->title = $name;
  return $props;
}



/**
 * The main form_alter that will alter node forms in common ways
 */
function rpgmain_form_node_form_alter (&$form, &$form_state) {
 //dpm($form_state, '$form_state');
  // Get all of the form elements to be randomized from the module that controls this content type.
  // After getting the elements to be randomized, pre-select all options for that element
  // Name the function _get_random_[node_type_machine_name]_fields.
  //dpm($form_state['node'], '$node');
  drupal_add_js(drupal_get_path('theme', 'rpg') . '/js/node-form.js');
  $type = $form['type']['#value'];
  $module = $type . 'rules';
  //dpm($module, '$module');
  $all_fields = field_info_fields($type); // Get all fields on this node type (random or not)
  // get them element types
  if (module_exists($module)) {

    // Add a validate handler to randomly select from all the fields selected.
    // Add it to the beginning of the list of validators so other validators can make use
    // of the randomly generated values values
    array_unshift($form['#validate'], '_select_random_options_all');
    $randomized_fields = _getfields($type);
    // Set them default values (all values are selected by default)
    if (!isset($form_state['node']->nid)) { // Don't pre-select all options if editing an existing node!
      foreach ($randomized_fields as $key => $field) {
        // Add the UX select all / deselect all options
        $form[$field]['und']['#title'] .= ' <span class="deselectall">(Deselect all</span>';
            $form[$field]['und']['#title'] .= ' <span class="selectall">Select all)</span>';

        $options = list_allowed_values($all_fields[$field]);
        $defaults = array();
        foreach ($options as $key => $option) {
          $defaults[] = $key;
        }
        $form[$field]['und']['#default_value'] = $defaults;

      }
    }
  }
}


/**
 * Roll percentile dice and determine the result
 *
 * @param int $chance The % chance that something is true
 *
 * @return boolean
 */
function _rollpercentile ($chance = 50) {
  $roll = rand(1, 100);
  if ($roll < $chance) {
    return TRUE;
  }else {
    return FALSE;
  }
}


/**
 * Set a single value in a form element. Helper function.
 *
 * @param string $field The machine name of the field to set
 * @param string $option The storage value (key) of the value being set
 * @param array $form The form array  form_set_value() requires this.
 * @param array $form_state The form state array. form_set_value() requires this.
 */
function _setopt ($field, $option, $form, &$form_state) {
  form_set_value($form[$field], array('und' => array(0 => array('value' => $option))), $form_state);
}


/**
 * Retrieves a list of options from a form element.  Typically this is used
 * to get all the options in order to select a random option.
 *
 * @param string $field The machine name for an element
 *
 * @return array An array of options for the element
 */
function _getopts ($field) {
  $all_fields = field_info_fields();
  $options = list_allowed_values($all_fields[$field]);
  return $options;
}

/**
 * Gets s list of all the fields from a content type that should be randomized.
 * 
 * @param string $type the machine name of a content type.
 */
function _getfields ($type) {
  $function = '_get_random_' . $type . '_fields';
  if (function_exists($function)) {
    $randomized_fields = $function();
    return $randomized_fields;
  }
}

/**
 * Select random values for all the multiselect fields
 */
function _select_random_options_all ($form, &$form_state) {
  $fields = _getfields($form_state['values']['type']);
  foreach ($fields as $field) { // $field = one of the form elements that should be chosen randomly
    // $random = all the selected items from the form element
    $random = array_rand($form_state['values'][$field]['und']);
    $value = $form_state['values'][$field]['und'][$random]['value'];
    _setopt($field, $value, $form, $form_state);
  }
}


function _avsan ($nextword) {
  $indefinate_article = "a"; // $next word sounds like it starts with a consonant
  $an_words = array('eladrin',
      'elf',
      );
  if (in_array($nextword, $an_words)) {
    $indefinate_article = "an";
  }

  return $indefinate_article;
}
